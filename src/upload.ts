import * as core from '@actions/core';
import * as artifact from '@actions/artifact';
import { promises as fsp } from 'fs';
import { IActionInputs } from './types';
import * as inputs from './inputs';

/**
 * If enabled, uploads all report files generated by the scanner as an artifact.
 * 
 * @param {IActionInputs} params 
 */
export async function generate( params: IActionInputs ): Promise<void> {
    core.startGroup( 'ðŸ“¦ Artifact Upload' );

    if ( params.upload_artifact ) {
        const filePath = inputs.getXUnitOutputReportPath( params );
        const stat = await fsp.stat( filePath );
        
        if ( stat.isFile() ) {
            await upload( params, filePath );
        } else {
            core.warning( 'No generated result files found to upload; skipping.' );
        }
    } else {
        core.info( 'Not enabled; skipping.' );
    }

    core.endGroup();
}

/**
 * Uploads an artifact containing the provided absolute-pathed XUnit test results
 * file.
 * 
 * @param {IActionInputs} params 
 * @param {string} filePath 
 */
async function upload( params: IActionInputs, filePath: string ): Promise<void> {
    try {
        core.info( `Preparing artifact "${params.artifact_name}" containing XUnit test results.` );

        const client = artifact.create();
        const options: artifact.UploadOptions = {
            continueOnError: true,
            retentionDays: params.artifact_retention_days
        };

        const response = await client.uploadArtifact(
            params.artifact_name,
            [ filePath ],
            'results',
            options
        );

        if ( response.failedItems.length > 0 ) {
            core.warning( `"${params.artifact_name}" failed to upload test results.` );
        } else {
            core.info( `Artifact "${params.artifact_name}" upload successful.` );
        }
    } catch ( err: any ) {
        core.warning( err.message );
    }
}